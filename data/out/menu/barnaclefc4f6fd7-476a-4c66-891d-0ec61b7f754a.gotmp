// ----------------------------------------------------------------
// Automatically generated  "/dao/barnacle.go"
// ----------------------------------------------------------------
// Package            : dao
// Object 			  : Barnacle
// Endpoint Root 	  : 
// Search QueryString : Barnid
// From   			  : 
// ----------------------------------------------------------------
// Template Generator : RussetAlbatross [r0-21.11.01]
// ----------------------------------------------------------------
// Date & Time		  : 13/11/2021 at 14:15:28
// Who & Where		  : matttownsend on silicon.local
// ----------------------------------------------------------------
import (
	"fmt"
	"log"

	core "github.com/mt1976/templatebuiler/core"
	das "github.com/mt1976/templatebuiler/das"
	dm "github.com/mt1976/templatebuiler/datamodel"
)

// Barnacle_GetList() returns a list of all Barnacle records
func Barnacle_GetList() (int, []dm.Barnacle, error) {

	tsql := "SELECT * FROM " + get_TableName(core.ApplicationPropertiesDB["schema"], dm.Barnacle_SQLTable)
	count, recordList, _, _ := fetchData(tsql)
	return count, recordList, nil
}

// Barnacle_GetByID() returns a single Barnacle record
func Barnacle_GetByID(id string) (int, dm.Barnacle, error) {

	tsql := "SELECT * FROM " + get_TableName(core.ApplicationPropertiesDB["schema"], dm.Barnacle_SQLTable)
	tsql = tsql + " WHERE " + Barnacle_Key + "='" + id + "'"

	_, _, recordItem, _ := fetchData(tsql)
	return 1, recordItem, nil
}

// Barnacle_DeleteByID() deletes a single Barnacle record
func Barnacle_Delete(id string) (int, dm.Barnacle, error) {

	object_Table := core.ApplicationPropertiesDB["schema"] + "." + dm.Barnacle_SQLTable

	tsql := "DELETE FROM " + object_Table
	tsql = tsql + " WHERE " + dm.Barnacle_SQLID + " = '" + id + "'"

	das.Execute(tsql)
}

// Barnacle_Store() saves/stores a Barnacle record to the database
func Barnacle_Store(r dm.Barnacle) error {

	// TODO Implement Store Function for Barnacle
	fmt.Println(r)


//TODO Deal with the if its Application or null add this bit, otherwise dont.
		//fmt.Println(credentialStore)
	createDate := time.Now().Format(core.DATETIMEFORMATUSER)
	if len(r.SYSCreated) == 0 {
		r.SYSCreated = createDate
	}

	currentUserID, _ := user.Current()
	userID := currentUserID.Name
	host, _ := os.Hostname()

	if len(r.ID) == 0 {
		r.Id = newbarnacleStoreID
		r.SYSCreated = createDate
		r.SYSWho = userID
		r.SYSHost = host
	}

	r.SYSUpdated = createDate
//TODO Deal with the if its Application or null add this bit, otherwise dont.

	tsql := "INSERT INTO" + get_TableName(core.ApplicationPropertiesDB["schema"], dm.Barnacle_SQLTable)
	tsql = tsql + " ("
	   tsql = tsql + dm.Barnacle_Field1 + ", " 
	   tsql = tsql + dm.Barnacle_Field2 + ", " 
	   tsql = tsql + dm.Barnacle_ID + ", " 
	   tsql = tsql + dm.Barnacle_Code + ", " 
	   tsql = tsql + dm.Barnacle_Name + ", " 
	   tsql = tsql + dm.Barnacle__who + ", " 
	tsql = tsql + ") "
	tsql = tsql + " VALUES (" 
	   tsql = tsql + sq(r.Field1) + ", " 
	   tsql = tsql + sq(r.Field2) + ", " 
	   tsql = tsql + sq(r.ID) + ", " 
	   tsql = tsql + sq(r.Code) + ", " 
	   tsql = tsql + sq(r.Name) + ", " 
	   tsql = tsql + sq(r._who) + ", " 
	tsql = tsql + ")"

	Barnacle_Delete(r.ID)

	das.Execute(tsql)

	return nil
}

// fetchData read all employees
func fetchData(tsql string) (int, []dm.Barnacle, dm.Barnacle, error) {

	var recItem dm.Barnacle
	var recList []dm.Barnacle

	returnList, noitems, err := das.Query(core.ApplicationDB, tsql)
	if err != nil {
		log.Fatal(err.Error())
	}

	for i := 0; i < noitems; i++ {

		rec := returnList[i]
	// Automatically generated 13/11/2021 by matttownsend on silicon.local - START
recItem.Field1  = get_String(rec, dm.Barnacle_Field1, "")
recItem.Field2  = get_Float(rec, dm.Barnacle_Field2, "")
recItem.ID  = get_Int(rec, dm.Barnacle_ID, "")
recItem.Code  = get_String(rec, dm.Barnacle_Code, "")
recItem.Name  = get_Time(rec, dm.Barnacle_Name, "")
recItem._who  = get_String(rec, dm.Barnacle__who, "")
// Automatically generated 13/11/2021 by matttownsend on silicon.local - END

		//Post Import Actions

		//Add to the list
		recList = append(recList, recItem)
	}
	return noitems, recList, recItem, nil
}

func newbarnacleStoreID() string {
	id := uuid.New().String()
	return id
}

// ----------------------------------------------------------------
// ADD Aditional Functions below this line
// ----------------------------------------------------------------

