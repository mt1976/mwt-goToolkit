package adaptor

import (
	"strings"

	core "{{.ProjectRepo}}core"
	logs "{{.ProjectRepo}}logs"
    dm "{{.ProjectRepo}}datamodel"
)
// ----------------------------------------------------------------
// Automatically generated  "/adaptor/{{.ObjectNameLower}}.go"
// ----------------------------------------------------------------
// Package              : adaptor
// Object 			    : {{.ObjectName}} ({{.ObjectNameLower}})
// Endpoint 	        : {{.EndpointRoot}} ({{.QueryString}})
// For Project          : {{.ProjectRepo}}
// ----------------------------------------------------------------
// Template Generator   : {{.Version}}
// Date & Time		    : {{.Date}} at {{.Time}}
// Who & Where		    : {{.Who}} on {{.Host}}
// ----------------------------------------------------------------

// The following functions should be created in {{.ObjectNameLower}}_impl.go

{{if .HasFetchAdaptor}}
func {{.ObjectName}}_GetList_impl() (int, []dm.{{.ObjectName}}, error) {return 0, nil, nil}
func {{.ObjectName}}_GetByID_impl(id string) (int, dm.{{.ObjectName}}, error) {return 0, dm.{{.ObjectName}}{}, nil}
{{if .ProvidesReverseLookup}}
func {{.ObjectName}}_GetByReverseLookup_impl(id string,lookupField string) (int, dm.{{.ObjectName}}, error) {return 0, dm.{{.ObjectName}}{}, nil}
{{end}}
{{end}}
{{if or .HasStoreAdaptor .HasFetchAdaptor}}
func {{.ObjectName}}_NewID_impl(rec dm.{{.ObjectName}}) (string) { return rec.{{.QueryFieldID}} }
func {{.ObjectName}}_Delete_impl(id string) (error) {return nil}
{{end}}
{{if .HasStoreAdaptor}}
func {{.ObjectName}}_Update_impl(id string,rec dm.{{.ObjectName}}, usr string) (error) {return nil}
{{end}}
	// If there are fields below, create the methods in adaptor\{{$.ObjectNameLower}}_impl.go
	// START - GET API/Callout
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	//
{{range .FieldsList}}{{if .HasCallout}}func {{$.ObjectName}}_{{.FieldName}}_OnStore_impl (fieldval string,rec dm.{{$.ObjectName}},usr string) (string,error)  {
	logs.Callout("{{$.ObjectName}}", "{{.FieldName}}", PUT, rec.{{$.QueryFieldID}})
	return fieldval,nil
	}
{{end}}{{end}}
	// 
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	// END - GET API/Callout
	//
	// START - PUT API/Callout
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	//
{{range .FieldsList}}{{if .HasCallout}}func {{$.ObjectName}}_{{.FieldName}}_OnFetch_impl (rec dm.{{$.ObjectName}})(string) {
	logs.Callout("{{$.ObjectName}}", "{{.FieldName}}", GET, rec.{{$.QueryFieldID}})
	return rec.{{.FieldName}}
	}
{{end}}{{end}}
	// 
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	// END - PUT API/Callout
{{if .HasMonitor}}
func {{.ObjectName}}_Simulator_ProcessResponse_impl(filename string) error {
	logs.Success("{{.ObjectName}}_Simulator_ProcessResponse:" + filename)
	// tokenise the filename, get last element
	tokens := strings.Split(filename, "/")
    last := tokens[len(tokens)-1]
	core.Notification_Normal("New {{.FriendlyName}} Message Detected", last)
    return {{.ObjectNameLower}}_Simulator_ProcessResponse_impl (tokens,last)
}

func {{.ObjectNameLower}}_Simulator_ProcessResponse_impl (tokens []string,latestToken string) error {
    return nil
}
{{end}}
	// START - Validation API/Callout
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	//
{{range .FieldsList}}{{if .HasCallout}}	// {{$.ObjectName}}_{{.FieldName}}_impl provides validation/actions for {{.FieldName}}
	func {{$.ObjectName}}_{{.FieldName}}_impl (iAction string, iId string, iValue string, iRec dm.{{$.ObjectName}}, fP dm.FieldProperties) (string, dm.FieldProperties) {
	logs.Callout("{{$.ObjectName}}", "{{.FieldName}}", VAL +"-"+iAction, iId)
	return iValue,fP
	}
{{end}}{{end}}
	// 
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	// END - Validation API/Callout

func {{$.ObjectName}}_ObjectValidation_impl (iAction string, iId string, iRec dm.{{$.ObjectName}}) (dm.{{$.ObjectName}}, string, error) {
	logs.Callout("{{$.ObjectName}}", "ObjectValidation", VAL +"-"+iAction, iId)
	switch iAction {
		case VAL:

		case NEW:

		case PUT:

		case GET:

		default:
			logs.Warning("Tmpl_TDate_impl" + " - Invalid Action")
		}
	return iRec,"",nil
	}
	