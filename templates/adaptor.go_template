package dao

import (
	"strings"

	core "{{.ProjectRepo}}core"
	logs "{{.ProjectRepo}}logs"
    dm "{{.ProjectRepo}}datamodel"
)
	// ----------------------------------------------------------------
	// Automatically generated  "/dao/{{.ObjectNameLower}}.go"
	// ----------------------------------------------------------------
	// Package              : dao
	// Object 			    : {{.ObjectName}} ({{.ObjectNameLower}})
	// Endpoint 	        : {{.EndpointRoot}} ({{.QueryString}})
	// For Project          : {{.ProjectRepo}}
	// ----------------------------------------------------------------
	// Template Generator   : {{.Version}}
	// Date & Time		    : {{.Date}} at {{.Time}}
	// Who & Where		    : {{.Who}} on {{.Host}}
	// ----------------------------------------------------------------
	// The following functions should be created in {{.ObjectNameLower}}_impl.go
	// ----------------------------------------------------------------
{{if .HasFetchAdaptor}}
	// ----------------------------------------------------------------
	// {{.ObjectName}}_GetList_impl provides the implementation to get a list of records
	func {{.ObjectName}}_GetList_impl(filter string) (int, []dm.{{.ObjectName}}, error) {return 0, nil, nil}
	// ----------------------------------------------------------------
	// {{.ObjectName}}_GetByID_impl provides the implementation to get a record by ID
	func {{.ObjectName}}_GetByID_impl(id string) (int, dm.{{.ObjectName}}, error) {return 0, dm.{{.ObjectName}}{}, nil}
	//
	{{if .ProvidesReverseLookup}}
	// ----------------------------------------------------------------
	// {{.ObjectName}}_GetByReverseLookup_impl provides the implementation to get a record by a reverse lookup
	func {{.ObjectName}}_GetByReverseLookup_impl(id string,lookupField string) (int, dm.{{.ObjectName}}, error) {return 0, dm.{{.ObjectName}}{}, nil}
	// ----------------------------------------------------------------
	{{end}}
	// ----------------------------------------------------------------
{{end}}
{{if or .HasStoreAdaptor .HasFetchAdaptor}}
	// ----------------------------------------------------------------
	// {{.ObjectName}}_NewID_impl provides the implementation to generate a new ID for a new record
	func {{.ObjectName}}_NewID_impl(rec dm.{{.ObjectName}}) (string) { return rec.{{.QueryFieldID}} }
	// ----------------------------------------------------------------
	// {{.ObjectName}}_New_impl provides the implementation to delete a new record
	func {{.ObjectName}}_Delete_impl(id string) (error) {return nil}
	// ----------------------------------------------------------------
{{end}}
{{if .HasStoreAdaptor}}
	// ----------------------------------------------------------------
	// {{.ObjectName}}_Store_impl provides the implementation for the store adaptor
	func {{.ObjectName}}_Update_impl(id string,rec dm.{{.ObjectName}}, usr string) (error) {return nil}
{{end}}
	// ----------------------------------------------------------------
	{{if .HasMonitor}}
	// ----------------------------------------------------------------
	// {{.ObjectName}}_Monitor_ProcessResponse_impl provides the implementation for the monitor
	func {{.ObjectName}}_Monitor_ProcessResponse_impl(filename string) error {
		logs.Success("{{.ObjectName}}_Monitor_ProcessResponse:" + filename)
		// tokenise the filename, get last element
		tokens := strings.Split(filename, "/")
		last := tokens[len(tokens)-1]
		core.Notification_Normal("New {{.FriendlyName}} Message Detected", last)
		return {{.ObjectNameLower}}_Monitor_ProcessResponse_impl (tokens,last)
	}
	//
	// {{.ObjectName}}_Monitor_ProcessResponse_impl provides the implementation to process the response
	func {{.ObjectNameLower}}_Monitor_ProcessResponse_impl (tokens []string,latestToken string) error {
		return nil
	}
	//
{{end}}

{{range .FieldsList}}{{if .HasCallout}}
	// ----------------------------------------------------------------
	// BEGIN {{$.ObjectName}}_{{.FieldName}}
	// BEGIN {{$.ObjectName}}_{{.FieldName}}
	// BEGIN {{$.ObjectName}}_{{.FieldName}}
	// ----------------------------------------------------------------
	// {{$.ObjectName}}_{{.FieldName}}_OnStore_impl provides the implementation for the callout
	func {{$.ObjectName}}_{{.FieldName}}_OnStore_impl (fieldval string,rec dm.{{$.ObjectName}},usr string) (string,error)  {
		logs.Callout("{{$.ObjectName}}", dm.{{$.ObjectName}}_{{.FieldName}}_scrn, PUT, rec.{{$.QueryFieldID}})
		return fieldval,nil
	}
	// ----------------------------------------------------------------
	// {{$.ObjectName}}_{{.FieldName}}_OnFetch_impl provides the implementation for the callout	
	func {{$.ObjectName}}_{{.FieldName}}_OnFetch_impl (rec dm.{{$.ObjectName}})(string) {
		logs.Callout("{{$.ObjectName}}", dm.{{$.ObjectName}}_{{.FieldName}}_scrn, GET, rec.{{$.QueryFieldID}})
		return rec.{{.FieldName}}
	}
	// ----------------------------------------------------------------
	// END   {{$.ObjectName}}_{{.FieldName}}
	// END   {{$.ObjectName}}_{{.FieldName}}
	// END   {{$.ObjectName}}_{{.FieldName}}
	// ----------------------------------------------------------------
{{end}}{{end}}
	// ----------------------------------------------------------------
	// Automatically generated code ends here
	// ----------------------------------------------------------------