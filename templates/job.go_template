package jobs
// ----------------------------------------------------------------
// Automatically generated  "/jobs/{{.ObjectNameLower}}.go"
// ----------------------------------------------------------------
// Package              : jobs
// Object 			    : {{.ObjectName}} ({{.ObjectNameLower}})
// Endpoint 	        : {{.EndpointRoot}} ({{.QueryString}})
// For Project          : {{.ProjectRepo}}
// ----------------------------------------------------------------
// Template Generator   : {{.Version}}
// Date & Time		    : {{.Date}} at {{.Time}}
// Who & Where		    : {{.Who}} on {{.Host}}
// ----------------------------------------------------------------

import (
	routes "{{.ProjectRepo}}routes"
	dm          "{{.ProjectRepo}}datamodel"
	logs        "{{.ProjectRepo}}logs"
		core        "{{.ProjectRepo}}core"

	cron        "github.com/robfig/cron/v3"
)

// {{.ObjectName}}Job defines the job properties, name, period etc..
func {{.ObjectName}}_Job() dm.JobDefinition {
	// ----------------------------------------------------------------
	// Job Definition
	// Create a new job definition in the {{.ObjectName}}_Impl.go file called {{.ObjectName}}_JobImpl()
	// ----------------------------------------------------------------
	var j dm.JobDefinition
	j.ID = "{{.ObjectName}}"
	j.Name = "{{.ObjectName}}"
	j.Period = "10 1 * * *"
	j.Description = "{{.ObjectName}} processing"
	j.Type = core.General
	j = {{.ObjectName}}_Job_impl(j)
	return j
}

func {{.ObjectName}}_Register(c *cron.Cron) {
	routes.Schedule_Register({{.ObjectName}}_Job())
	c.AddFunc({{.ObjectName}}_Job().Period, func() { {{.ObjectName}}_Run() })
}

// {{.ObjectName}}_Run initiates and runs the job as per the period.
func {{.ObjectName}}_Run() {
	logs.StartJob({{.ObjectName}}_Job().Name)
	message := ""
	/// CONTENT STARTS
	// Create a func in the {{.ObjectName}}_Impl.go file called {{.ObjectName}}_Run_impl() that returns string,error	
	message,err := {{.ObjectName}}_Run_impl()
	if err != nil {
		logs.Warning(err.Error())
	}
	/// CONTENT ENDS
	routes.Schedule_Update({{.ObjectName}}_Job(), message)
	logs.EndJob({{.ObjectName}}_Job().Name)
}