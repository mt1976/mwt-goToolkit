package routes
// ----------------------------------------------------------------
// Automatically generated  "/routes/{{.ObjectNameLower}}.go"
// ----------------------------------------------------------------
// Package              : routes
// Object 			    : {{.ObjectName}} ({{.ObjectNameLower}})
// Endpoint 	        : {{.EndpointRoot}} ({{.QueryString}})
// For Project          : {{.ProjectRepo}}
// ----------------------------------------------------------------
// Template Generator   : {{.Version}}
// Date & Time		    : {{.Date}} at {{.Time}}
// Who & Where		    : {{.Who}} on {{.Host}}
// ----------------------------------------------------------------

import (
	
	"net/http"
	"strings"

	core    "{{.ProjectRepo}}core"
	dao     "{{.ProjectRepo}}dao"
	dm      "{{.ProjectRepo}}datamodel"
	logs    "{{.ProjectRepo}}logs"
)

//{{.ObjectName}}_Publish annouces the endpoints available for this object
func {{.ObjectName}}_Publish(mux http.ServeMux) {
	{{if .CanAPI}}mux.HandleFunc(dm.{{.ObjectName}}_Path, {{.ObjectName}}_Handler){{else}}//No API{{end}}
	{{if .CanList}}mux.HandleFunc(dm.{{.ObjectName}}_PathList, {{.ObjectName}}_HandlerList){{else}}//Cannot List via GUI{{end}}
	{{if .CanView}}mux.HandleFunc(dm.{{.ObjectName}}_PathView, {{.ObjectName}}_HandlerView){{else}}//Cannot View via GUI{{end}}
	{{if .CanEdit}}mux.HandleFunc(dm.{{.ObjectName}}_PathEdit, {{.ObjectName}}_HandlerEdit){{else}}//Cannot Edit via GUI{{end}}
	{{if .CanNew}}mux.HandleFunc(dm.{{.ObjectName}}_PathNew, {{.ObjectName}}_HandlerNew){{else}}//Cannot Create via GUI{{end}}
	{{if .CanSave}}mux.HandleFunc(dm.{{.ObjectName}}_PathSave, {{.ObjectName}}_HandlerSave){{else}}//Cannot Save via GUI{{end}}
	{{if .CanDelete}}mux.HandleFunc(dm.{{.ObjectName}}_PathDelete, {{.ObjectName}}_HandlerDelete){{else}}//Cannot Delete via GUI{{end}}
    {{if .CanAPI}}core.API = core.API.AddRoute(dm.{{.ObjectName}}_Title, dm.{{.ObjectName}}_Path, "", dm.{{.ObjectName}}_QueryString, "{{.SourceType}}"){{else}}//No API{{end}}
	logs.Publish("{{.SourceType}}", dm.{{.ObjectName}}_Title)
}
{{if .CanList}}
//{{.ObjectName}}_HandlerList is the handler for the {{.ObjectName}} list page
func {{.ObjectName}}_HandlerList(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below
	inUTL := r.URL.Path
	w.Header().Set("Content-Type", "text/html")
	core.ServiceMessage(inUTL)

	var returnList []dm.{{.ObjectName}}

	objectName := dao.Translate("ObjectName", "{{.ObjectName}}")
	reqField := "Base"
	usage := "Defines a filter for the list of {{.ObjectName}} records." + core.TEXTAREA_CR
	usage = usage + "Fields can be any of those in the underlying DB table." + core.TEXTAREA_CR
	usage = usage + "Examples Below:" + core.TEXTAREA_CR
	usage = usage + "* datalength(_deleted) = 0 or " + core.TEXTAREA_CR 
	usage = usage + "* class IN ('x','y','z')"
	
	filter,_ := dao.Data_GetString(objectName, reqField, dm.Data_Category_FilterRule,usage)
	if filter == "" {
		logs.Warning("No filter found : " + reqField + " for Object: " + objectName)
	} 

	noItems, returnList, _ := dao.{{.ObjectName}}_GetListFiltered(filter)

	pageDetail := dm.{{.ObjectName}}_PageList{
		Title:            CardTitle(dm.{{.ObjectName}}_Title, core.Action_List),
		PageTitle:        PageTitle(dm.{{.ObjectName}}_Title, core.Action_List),
		ItemsOnPage: 	  noItems,
		ItemList:         returnList,
		UserMenu:         UserMenu_Get(r),
		UserRole:         Session_GetUserRole(r),
	}
	pageDetail.SessionInfo, _ = Session_GetSessionInfo(r)

	nextTemplate :=  NextTemplate("{{.ObjectName}}", "List", dm.{{.ObjectName}}_TemplateList)
	ExecuteTemplate(nextTemplate, w, r, pageDetail)
}
{{end -}}
{{if .CanView}}
//{{.ObjectName}}_HandlerView is the handler used to View a {{.ObjectName}} database record
func {{.ObjectName}}_HandlerView(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below
	w.Header().Set("Content-Type", "text/html")
	logs.Servicing(r.URL.Path)

	searchID := core.GetURLparam(r, dm.{{.ObjectName}}_QueryString)
	_, rD, _ := dao.{{.ObjectName}}_GetByID(searchID)

	pageDetail := dm.{{.ObjectName}}_Page{
		Title:       CardTitle(dm.{{.ObjectName}}_Title, core.Action_View),
		PageTitle:   PageTitle(dm.{{.ObjectName}}_Title, core.Action_View),
		UserMenu:    UserMenu_Get(r),
		UserRole:    Session_GetUserRole(r),
	}
	pageDetail.SessionInfo, _ = Session_GetSessionInfo(r)
	pageDetail = {{.ObjectNameLower}}_PopulatePage(rD , pageDetail) 

	nextTemplate :=  NextTemplate("{{.ObjectName}}", "View", dm.{{.ObjectName}}_TemplateView)
	nextTemplate = {{.ObjectNameLower}}_URIQueryData(nextTemplate,rD,searchID)

	ExecuteTemplate(nextTemplate, w, r, pageDetail)
}
{{end -}}
{{if .CanEdit}}
//{{.ObjectName}}_HandlerEdit is the handler used to Edit of an existing {{.ObjectName}} database record
func {{.ObjectName}}_HandlerEdit(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below
	w.Header().Set("Content-Type", "text/html")
	logs.Servicing(r.URL.Path)

	searchID := core.GetURLparam(r, dm.{{.ObjectName}}_QueryString)
	action := core.GetURLparam(r, core.ContextState)

	var rD dm.{{.ObjectName}}
	if action == core.ContextState_ERROR {
		rD = core.SessionManager.Get(r.Context(), searchID).(dm.{{.ObjectName}})
	} else {
		_, rD, _ = dao.{{.ObjectName}}_GetByID(searchID)
	}
	
	pageDetail := dm.{{.ObjectName}}_Page{
		Title:       CardTitle(dm.{{.ObjectName}}_Title, core.Action_Edit),
		PageTitle:   PageTitle(dm.{{.ObjectName}}_Title, core.Action_Edit),
		UserMenu:    UserMenu_Get(r),
		UserRole:    Session_GetUserRole(r),
	}
	pageDetail.SessionInfo, _ = Session_GetSessionInfo(r)
	pageDetail = {{.ObjectNameLower}}_PopulatePage(rD , pageDetail) 

	nextTemplate :=  NextTemplate("{{.ObjectName}}", "Edit", dm.{{.ObjectName}}_TemplateEdit)
	nextTemplate = {{.ObjectNameLower}}_URIQueryData(nextTemplate,rD,searchID)

	ExecuteTemplate(nextTemplate, w, r, pageDetail)
}
{{end -}}
{{if .CanSave}}
//{{.ObjectName}}_HandlerSave is the handler used process the saving of an {{.ObjectName}} database record, either new or existing, referenced by Edit & New Handlers.
func {{.ObjectName}}_HandlerSave(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below
	w.Header().Set("Content-Type", "text/html")
	itemID := r.FormValue("{{.QueryFieldID}}")
	logs.Servicing(r.URL.Path+itemID)

	item := {{.ObjectNameLower}}_DataFromRequest(r)
	
	item, errStore := dao.{{.ObjectName}}_Store(item,r)
	if errStore == nil {
		nextTemplate :=  NextTemplate("{{.ObjectName}}", "Save", dm.{{.ObjectName}}_Redirect)
		nextTemplate = {{.ObjectNameLower}}_URIQueryData(nextTemplate,item,itemID)
		http.Redirect(w, r, nextTemplate, http.StatusFound)
	} else {
		logs.Information(dm.{{.ObjectName}}_Name, errStore.Error())
		ExecuteRedirect(r.Referer(), w, r,dm.{{.ObjectName}}_QueryString,itemID,item)
	}
}
{{end -}}
{{if .CanNew}}
//{{.ObjectName}}_HandlerNew is the handler used process the creation of an new {{.ObjectName}} database record, then redirect to Edit
func {{.ObjectName}}_HandlerNew(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below
	w.Header().Set("Content-Type", "text/html")
	logs.Servicing(r.URL.Path)

	searchID := core.GetURLparam(r, dm.{{.ObjectName}}_QueryString)
	action := core.GetURLparam(r, core.ContextState)

	var rD dm.{{.ObjectName}}
	if action == core.ContextState_ERROR {
		rD = core.SessionManager.Get(r.Context(), searchID).(dm.{{.ObjectName}})
	} else {
		_, _, rD, _ = dao.{{.ObjectName}}_New()
	}

	pageDetail := dm.{{.ObjectName}}_Page{
		Title:       CardTitle(dm.{{.ObjectName}}_Title, core.Action_New),
		PageTitle:   PageTitle(dm.{{.ObjectName}}_Title, core.Action_New),
		UserMenu:    UserMenu_Get(r),
		UserRole:    Session_GetUserRole(r),
	}
	pageDetail.SessionInfo, _ = Session_GetSessionInfo(r)
	pageDetail = {{.ObjectNameLower}}_PopulatePage(rD , pageDetail) 

	nextTemplate :=  NextTemplate("{{.ObjectName}}", "New", dm.{{.ObjectName}}_TemplateNew)
	nextTemplate = {{.ObjectNameLower}}_URIQueryData(nextTemplate,dm.{{.ObjectName}}{},searchID)

	ExecuteTemplate(nextTemplate, w, r, pageDetail)
}	
{{end -}}
{{if .CanDelete}}
//{{.ObjectName}}_HandlerDelete is the handler used process the deletion of an {{.ObjectName}} database record. May be Hard or SoftDelete.
func {{.ObjectName}}_HandlerDelete(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below
	logs.Servicing(r.URL.Path)
	searchID := core.GetURLparam(r, dm.{{.ObjectName}}_QueryString)
	// DAO Call to Delete {{.ObjectName}} Record, may be SoftDelete or HardDelete depending on the DAO implementation
	dao.{{.ObjectName}}_Delete(searchID)	

	nextTemplate :=  NextTemplate("{{.ObjectName}}", "Delete", dm.{{.ObjectName}}_Redirect)
	nextTemplate = {{.ObjectNameLower}}_URIQueryData(nextTemplate,dm.{{.ObjectName}}{},searchID)
	http.Redirect(w, r, nextTemplate, http.StatusFound)
}
{{end -}}
//{{.ObjectNameLower}}_PopulatePage Builds/Populates the {{.ObjectName}} Page from an instance of {{.ObjectName}} from the Data Model
func {{.ObjectNameLower}}_PopulatePage(rD dm.{{.ObjectName}}, pageDetail dm.{{.ObjectName}}_Page) dm.{{.ObjectName}}_Page {
	// Real DB Fields
	{{range .FieldsList}}{{if .IsBaseField}}pageDetail.{{.FieldName}} = rD.{{.FieldName}}
	{{end -}}{{end -}}
	// Add Pseudo/Extra Fields, fields that are not in the DB but are used in the UI
	{{range .FieldsList}}{{if .IsExtra}}pageDetail.{{.FieldName}} = rD.{{.FieldName}}
	{{end -}}{{end -}}
	// Enrichment content, content used provide lookups,lists etc
	{{range .FieldsList}}{{if .IsLookup}}{{if .IsFilteredLookup}}pageDetail.{{.FieldName}}_lookup = dao.{{.LookupObject}}_GetFilteredLookup("{{$.ObjectName}}","{{.FieldName}}")
	{{else}}pageDetail.{{.FieldName}}_lookup = dao.{{.LookupObject}}_GetLookup()
	{{end -}}
	{{end -}}
	{{if .IsListLookup}}pageDetail.{{.FieldName}}_lookup = dao.StubLists_Get("{{.LookupObject}}")
	{{end -}}
	{{end -}}
	// Add the Properties for the Fields
	{{range .FieldsList}}pageDetail.{{.FieldName}}_props = rD.{{.FieldName}}_props
	{{end -}}
	return pageDetail
}	

{{- if .CanSave}}
//{{.ObjectNameLower}}_DataFromRequest is used process the content of an HTTP Request and return an instance of an {{.ObjectName}}
func {{.ObjectNameLower}}_DataFromRequest(r *http.Request) dm.{{.ObjectName}} {
	var item dm.{{.ObjectName}}
	{{range .FieldsList}}item.{{.FieldName}} = r.FormValue(dm.{{$.ObjectName}}_{{.FieldName}}_scrn)
	{{end -}}
	return item
}
{{end -}}

//{{.ObjectNameLower}}_URIQueryData is used to replace the wildcards in the URI Query Path with the values from the {{.ObjectName}} Data Model
func {{.ObjectNameLower}}_URIQueryData(queryPath string,item dm.{{.ObjectName}},itemID string) string {
	if queryPath == "" {
		return ""
	}
	queryPath = core.ReplaceWildcard(queryPath, strings.ToUpper("ID"), itemID)
	{{range .FieldsList}}{{if not .IsAudit }}queryPath = core.ReplaceWildcard(queryPath, "!"+strings.ToUpper(dm.{{$.ObjectName}}_{{.FieldName}}_scrn), item.{{.FieldName}})
	{{end -}}
	{{end -}}
	return queryPath
}