package application
// ----------------------------------------------------------------
// Automatically generated  "/application/{{.ObjectNameLower}}.go"
// ----------------------------------------------------------------
// Package              : application
// Object 			    : {{.ObjectName}} ({{.ObjectNameLower}})
// Endpoint 	        : {{.EndpointRoot}} ({{.QueryString}})
// For Project          : {{.ProjectRepo}}
// ----------------------------------------------------------------
// Template Generator   : {{.Version}}
// Date & Time		    : {{.Date}} at {{.Time}}
// Who & Where		    : {{.Who}} on {{.Host}}
// ----------------------------------------------------------------

import (
	
	"net/http"

	core    "{{.ProjectRepo}}core"
	dao     "{{.ProjectRepo}}dao"
	dm      "{{.ProjectRepo}}datamodel"
	logs    "{{.ProjectRepo}}logs"
)

//{{.ObjectNameLower}}_PageList provides the information for the template for a list of {{.ObjectName}}s
type {{.ObjectName}}_PageList struct {
	SessionInfo      dm.SessionInfo
	UserMenu         []dm.AppMenuItem
	UserRole         string
	Title            string
	PageTitle        string
	ItemsOnPage 	 int
	ItemList  		 []dm.{{.ObjectName}}
}

//{{.ObjectNameLower}}_Page provides the information for the template for an individual {{.ObjectName}}
type {{.ObjectName}}_Page struct {
	SessionInfo      dm.SessionInfo
	UserMenu    	 []dm.AppMenuItem
	UserRole    	 string
	Title       	 string
	PageTitle   	 string
	// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - START
	{{range .FieldsList}}	{{.FieldName}} string
	{{end}}
	{{range .FieldsList}}{{if not .IsBaseField}}{{if .IsLookup}}{{.FieldName}}_List	[]dm.{{.LookupObject}}{{end}}{{end}}
	{{end}}
	// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - END
}

const (
	{{.ObjectName}}_Redirect = dm.{{.ObjectName}}_PathList
)

//{{.ObjectName}}_Publish annouces the endpoints available for this object
func {{.ObjectName}}_Publish(mux http.ServeMux) {
	{{if .CanList}}mux.HandleFunc(dm.{{.ObjectName}}_PathList, {{.ObjectName}}_HandlerList){{end}}
	{{if .CanView}}mux.HandleFunc(dm.{{.ObjectName}}_PathView, {{.ObjectName}}_HandlerView){{end}}
	{{if .CanEdit}}mux.HandleFunc(dm.{{.ObjectName}}_PathEdit, {{.ObjectName}}_HandlerEdit){{end}}
	{{if .CanNew}}mux.HandleFunc(dm.{{.ObjectName}}_PathNew, {{.ObjectName}}_HandlerNew){{end}}
	{{if .CanSave}}mux.HandleFunc(dm.{{.ObjectName}}_PathSave, {{.ObjectName}}_HandlerSave){{end}}
	{{if .CanDelete}}mux.HandleFunc(dm.{{.ObjectName}}_PathDelete, {{.ObjectName}}_HandlerDelete){{end}}
	logs.Publish("{{.PropertiesName}}", dm.{{.ObjectName}}_Title)
	{{if .IsSpecial}}
	// {{.ObjectNameLower}}_PublishImpl should be specified in application/{{.ObjectNameLower}}_Impl.go
	// to provide the implementation for the special case.
	// override function should be defined as
	// {{.ObjectNameLower}}_PublishImpl(mux http.ServeMux) {...}
	// TODO - this is a temporary hack to get the special case working
	// Add to main.go >>> {{.ObjectNameLower}}_PublishImpl(mux)
	{{end}}
}

//{{.ObjectName}}_HandlerList is the handler for the list page
func {{.ObjectName}}_HandlerList(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}

	inUTL := r.URL.Path
	w.Header().Set("Content-Type", "text/html")
	core.ServiceMessage(inUTL)

	var returnList []dm.{{.ObjectName}}
	noItems, returnList, _ := dao.{{.ObjectName}}_GetList()

	pageDetail := {{.ObjectName}}_PageList{
		Title:            CardTitle(dm.{{.ObjectName}}_Title, core.Action_List),
		PageTitle:        PageTitle(dm.{{.ObjectName}}_Title, core.Action_List),
		ItemsOnPage: 	  noItems,
		ItemList:         returnList,
		UserMenu:         UserMenu_Get(r),
		UserRole:         Session_GetUserRole(r),
	}
	
	pageDetail.SessionInfo, _ = Session_GetSessionInfo(r)
	
	ExecuteTemplate(dm.{{.ObjectName}}_TemplateList, w, r, pageDetail)

}

//{{.ObjectName}}_HandlerView is the handler used to View a page
func {{.ObjectName}}_HandlerView(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	w.Header().Set("Content-Type", "text/html")
	logs.Servicing(r.URL.Path)

	searchID := core.GetURLparam(r, dm.{{.ObjectName}}_QueryString)
	_, rD, _ := dao.{{.ObjectName}}_GetByID(searchID)

	pageDetail := {{.ObjectName}}_Page{
		Title:       CardTitle(dm.{{.ObjectName}}_Title, core.Action_View),
		PageTitle:   PageTitle(dm.{{.ObjectName}}_Title, core.Action_View),
		UserMenu:    UserMenu_Get(r),
		UserRole:    Session_GetUserRole(r),
	}

		// 
		// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - START
{{range .FieldsList}}{{if .IsBaseField}}pageDetail.{{.FieldName}} = rD.{{.FieldName}}
{{end}}{{end}}// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - Enrichment Fields Below
{{range .FieldsList}}{{if not .IsBaseField}}{{if .IsLookup}}_,{{.LookupField}}_Lookup_{{.LookupValue}},_:= dao.{{.LookupObject}}_GetByID(rD.{{.LookupField}})
pageDetail.{{.FieldName}} = {{.LookupField}}_Lookup_{{.LookupValue}}.{{.LookupValue}}
{{end}}{{end}}{{end}}// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - END
		//

{{if .IsSpecial}}
	// {{.ObjectNameLower}}_HandlerViewImpl should be specified in application/{{.ObjectNameLower}}_Impl.go
	// to provide the implementation for the special case.
	// override should return mux - override function should be defined as
	// func {{.ObjectNameLower}}_HandlerViewImpl(pageDetail {{.ObjectName}}_Page) {{.ObjectName}}_Page {return pageDetail}
	pageDetail = {{.ObjectNameLower}}_HandlerViewImpl(pageDetail)
{{end}}
	// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - END

	pageDetail.SessionInfo, _ = Session_GetSessionInfo(r)

	ExecuteTemplate(dm.{{.ObjectName}}_TemplateView, w, r, pageDetail)

}

//{{.ObjectName}}_HandlerEdit is the handler used generate the Edit page
func {{.ObjectName}}_HandlerEdit(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	w.Header().Set("Content-Type", "text/html")
	logs.Servicing(r.URL.Path)

	searchID := core.GetURLparam(r, dm.{{.ObjectName}}_QueryString)
	_, rD, _ := dao.{{.ObjectName}}_GetByID(searchID)
	
	pageDetail := {{.ObjectName}}_Page{
		Title:       CardTitle(dm.{{.ObjectName}}_Title, core.Action_Edit),
		PageTitle:   PageTitle(dm.{{.ObjectName}}_Title, core.Action_Edit),
		UserMenu:    UserMenu_Get(r),
		UserRole:    Session_GetUserRole(r),
	}

		// 
		// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - START
{{range .FieldsList}}{{if .IsBaseField}}pageDetail.{{.FieldName}} = rD.{{.FieldName}}
{{end}}{{end}}// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - Enrichment Fields Below
{{range .FieldsList}}{{if not .IsBaseField}}{{if .IsLookup}}_,{{.LookupField}}_Lookup_{{.LookupValue}},_:= dao.{{.LookupObject}}_GetByID(rD.{{.LookupField}})
pageDetail.{{.FieldName}} = {{.LookupField}}_Lookup_{{.LookupValue}}.{{.LookupValue}}
_,pageDetail.{{.FieldName}}_List,_ = dao.{{.LookupObject}}_GetList()
{{end}}{{end}}{{end}}// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - END
		//
{{if .IsSpecial}}
	// {{.ObjectNameLower}}_HandlerEditImpl should be specified in application/{{.ObjectNameLower}}_Impl.go
	// to provide the implementation for the special case.
	// override should return mux - override function should be defined as
	// func {{.ObjectNameLower}}_HandlerEditImpl(pageDetail {{.ObjectName}}_Page) {{.ObjectName}}_Page {return pageDetail}
	pageDetail = {{.ObjectNameLower}}_HandlerEditImpl(pageDetail)
{{end}}
	// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - END

	pageDetail.SessionInfo, _ = Session_GetSessionInfo(r)

	ExecuteTemplate(dm.{{.ObjectName}}_TemplateEdit, w, r, pageDetail)


}

//{{.ObjectName}}_HandlerSave is the handler used process the saving of an {{.ObjectName}}
func {{.ObjectName}}_HandlerSave(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	w.Header().Set("Content-Type", "text/html")
	logs.Servicing(r.URL.Path+r.FormValue("{{.QueryFieldID}}"))

	var item dm.{{.ObjectName}}
	// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - START
	{{range .FieldsList}}	item.{{.FieldName}} = r.FormValue(dm.{{$.ObjectName}}_{{.FieldName}})
	{{end}}
	// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - END
{{if .IsSpecial}}
	// {{.ObjectNameLower}}_HandlerSaveImpl should be specified in application/{{.ObjectNameLower}}_Impl.go
	// to provide the implementation for the special case.
	// override should return mux - override function should be defined as
	// func {{.ObjectNameLower}}_HandlerSaveImpl(item dm.{{.ObjectName}}) dm.{{.ObjectName}} {return item}
	item = {{.ObjectNameLower}}_HandlerSaveImpl(item)
{{end}}
	// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - END

	dao.{{.ObjectName}}_Store(item)	

	http.Redirect(w, r, {{.ObjectName}}_Redirect, http.StatusFound)
}

//{{.ObjectName}}_HandlerNew is the handler used process the creation of an {{.ObjectName}}
func {{.ObjectName}}_HandlerNew(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	inUTL := r.URL.Path
	w.Header().Set("Content-Type", "text/html")
	core.ServiceMessage(inUTL)

	pageDetail := {{.ObjectName}}_Page{
		Title:       CardTitle(dm.{{.ObjectName}}_Title, core.Action_New),
		PageTitle:   PageTitle(dm.{{.ObjectName}}_Title, core.Action_New),
		UserMenu:    UserMenu_Get(r),
		UserRole:    Session_GetUserRole(r),
	}

		// 
		// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - START
{{range .FieldsList}}{{if .IsBaseField}}pageDetail.{{.FieldName}} = ""
{{end}}{{end}}// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - Enrichment Fields Below
{{range .FieldsList}}{{if not .IsBaseField}}{{if .IsLookup}}pageDetail.{{.FieldName}} = ""
_,pageDetail.{{.FieldName}}_List,_ = dao.{{.LookupObject}}_GetList()
{{end}}{{end}}{{end}}// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - END
		//

	pageDetail.SessionInfo, _ = Session_GetSessionInfo(r)

	ExecuteTemplate(dm.{{.ObjectName}}_TemplateNew, w, r, pageDetail)

}

//{{.ObjectName}}_HandlerDelete is the handler used process the deletion of an {{.ObjectName}}
func {{.ObjectName}}_HandlerDelete(w http.ResponseWriter, r *http.Request) {
	// Mandatory Security Validation
	if !(Session_Validate(w, r)) {
		core.Logout(w, r)
		return
	}
	// Code Continues Below

	logs.Servicing(r.URL.Path)
	searchID := core.GetURLparam(r, dm.{{.ObjectName}}_QueryString)

	dao.{{.ObjectName}}_Delete(searchID)	

	http.Redirect(w, r, {{.ObjectName}}_Redirect, http.StatusFound)
}