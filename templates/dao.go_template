package dao

// ----------------------------------------------------------------
// Automatically generated  "/dao/{{.ObjectNameLower}}.go"
// ----------------------------------------------------------------
// Package            : dao
// Object 			  : {{.ObjectName}}
// Endpoint Root 	  : {{.EndpointRoot}}
// Search QueryString : {{.QueryString}}
// ----------------------------------------------------------------
// Template Generator : {{.Version}}
// ----------------------------------------------------------------
// Date & Time		  : {{.Date}} at {{.Time}}
// Who & Where		  : {{.Who}} on {{.Host}}
// ----------------------------------------------------------------
import (
	"fmt"
	"log"
	"os"
	"os/user"
	"time"

	"github.com/google/uuid"
	core "{{.ProjectRepo}}core"
	das  "{{.ProjectRepo}}das"
	dm   "{{.ProjectRepo}}datamodel"
)

// {{.ObjectName}}_GetList() returns a list of all {{.ObjectName}} records
func {{.ObjectName}}_GetList() (int, []dm.{{.ObjectName}}, error) {

	tsql := "SELECT * FROM " + get_TableName(core.{{.PropertiesName}}PropertiesDB["schema"], dm.{{.ObjectName}}_SQLTable)
	count, {{.ObjectNameLower}}List, _, _ := {{.ObjectNameLower}}_Fetch(tsql)
	return count, {{.ObjectNameLower}}List, nil
}

// {{.ObjectName}}_GetByID() returns a single {{.ObjectName}} record
func {{.ObjectName}}_GetByID(id string) (int, dm.{{.ObjectName}}, error) {

	tsql := "SELECT * FROM " + get_TableName(core.{{.PropertiesName}}PropertiesDB["schema"], dm.{{.ObjectName}}_SQLTable)
	tsql = tsql + " WHERE " + dm.{{.ObjectName}}_SQLSearchID + "='" + id + "'"

	_, _, {{.ObjectNameLower}}Item, _ := {{.ObjectNameLower}}_Fetch(tsql)
	return 1, {{.ObjectNameLower}}Item, nil
}

// {{.ObjectName}}_DeleteByID() deletes a single {{.ObjectName}} record
func {{.ObjectName}}_Delete(id string) {

	object_Table := core.ApplicationPropertiesDB["schema"] + "." + dm.{{.ObjectName}}_SQLTable

	tsql := "DELETE FROM " + object_Table
	tsql = tsql + " WHERE " + dm.{{.ObjectName}}_SQLSearchID + " = '" + id + "'"

	das.Execute(tsql)
}

// {{.ObjectName}}_Store() saves/stores a {{.ObjectName}} record to the database
func {{.ObjectName}}_Store(r dm.{{.ObjectName}}) error {

	// TODO Implement Store Function for {{.ObjectName}}
	fmt.Println(r)


//TODO Deal with the if its Application or null add this bit, otherwise dont.
		//fmt.Println(credentialStore)
	createDate := time.Now().Format(core.DATETIMEFORMATUSER)
	if len(r.SYSCreated) == 0 {
		r.SYSCreated = createDate
	}

	currentUserID, _ := user.Current()
	userID := currentUserID.Name
	host, _ := os.Hostname()

	if len(r.AppInternalID) == 0 {
		r.AppInternalID = new{{.ObjectNameLower}}StoreID()
		r.SYSCreated = createDate
		r.SYSWho = userID
		r.SYSHost = host
	}

	r.SYSUpdated = createDate
//TODO Deal with the if its Application or null add this bit, otherwise dont.


	ts := SQLData{}

{{range .FieldsList}}	ts = addData(ts, dm.{{$.ObjectName}}_{{.FieldName}}, r.{{.FieldName}})
{{end}}	

	tsql := "INSERT INTO " + get_TableName(core.{{.PropertiesName}}PropertiesDB["schema"], dm.{{.ObjectName}}_SQLTable)
	tsql = tsql + " (" + fields(ts) + ")"
	tsql = tsql + " VALUES (" + values(ts) + ")"

	{{.ObjectName}}_Delete(r.{{.SQLSearchID}})

	das.Execute(tsql)

	return nil
}

// {{.ObjectNameLower}}_Fetch read all employees
func {{.ObjectNameLower}}_Fetch(tsql string) (int, []dm.{{.ObjectName}}, dm.{{.ObjectName}}, error) {

	var recItem dm.{{.ObjectName}}
	var recList []dm.{{.ObjectName}}

	returnList, noitems, err := das.Query(core.{{.PropertiesName}}DB, tsql)
	if err != nil {
		log.Fatal(err.Error())
	}

	for i := 0; i < noitems; i++ {

		rec := returnList[i]
	// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - START
    recItem.AppInternalID = get_String(rec, dm.{{$.ObjectName}}_{{.SQLSearchID}},"")
{{range .FieldsList}}   recItem.{{.FieldName}}  = get_{{.Type}}(rec, dm.{{$.ObjectName}}_{{.FieldName}}, "{{.Default}}")
{{end}}// Automatically generated {{.Date}} by {{.Who}} on {{.Host}} - END
		//Post Import Actions

		//Add to the list
		recList = append(recList, recItem)
	}
	return noitems, recList, recItem, nil
}

func new{{.ObjectNameLower}}StoreID() string {
	id := uuid.New().String()
	return id
}
// ----------------------------------------------------------------
// ADD Aditional Functions below this line
// ----------------------------------------------------------------

