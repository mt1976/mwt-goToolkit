package dao
// ----------------------------------------------------------------
// Automatically generated  "/dao/{{.ObjectNameLower}}.go"
// ----------------------------------------------------------------
// Package            : dao
// Object 			    : {{.ObjectName}} ({{.ObjectNameLower}})
// Endpoint 	        : {{.EndpointRoot}} ({{.QueryString}})
// For Project          : {{.ProjectRepo}}
// ----------------------------------------------------------------
// Template Generator   : {{.Version}}
// Date & Time		    : {{.Date}} at {{.Time}}
// Who & Where		    : {{.Who}} on {{.Host}}
// ----------------------------------------------------------------

import (
	"errors"
	"fmt"
	"net/http"
	core "{{.ProjectRepo}}core"
	{{if not .CanOverrideID}}"github.com/google/uuid"{{end}}
	das  "{{.ProjectRepo}}das"
	dm   "{{.ProjectRepo}}datamodel"
	logs   "{{.ProjectRepo}}logs"
)

var {{.ObjectName}}_SQLbase string
var {{.ObjectName}}_QualifiedName string
func init(){
	{{.ObjectName}}_QualifiedName = get_TableName(core.ApplicationSQLSchema(), dm.{{.ObjectName}}_SQLTable)
	{{.ObjectName}}_SQLbase =  das.SELECTALL + das.FROM + {{.ObjectName}}_QualifiedName
}

// {{.ObjectName}}_GetList() returns a list of all {{.ObjectName}} records
func {{.ObjectName}}_GetList() (int, []dm.{{.ObjectName}}, error) {
	count, {{.ObjectNameLower}}List, err := {{.ObjectName}}_GetListFiltered("")
	return count, {{.ObjectNameLower}}List, err
}

// {{.ObjectName}}_GetListFiltered() returns a filtered list of all {{.ObjectName}} records
func {{.ObjectName}}_GetListFiltered(filter string) (int, []dm.{{.ObjectName}}, error) {
	{{if .HasFetchAdaptor}}
	count, {{.ObjectNameLower}}List, _ := {{.ObjectName}}_GetList_impl(filter)
	{{else}}
	tsql := {{.ObjectName}}_SQLbase
	if filter != "" {
		tsql = tsql + " " + das.WHERE + filter
	}
	count, {{.ObjectNameLower}}List, _, _ := {{.ObjectNameLower}}_Fetch(tsql)
	{{end}}
	return count, {{.ObjectNameLower}}List, nil
}

{{if .ProvidesLookup}}
// {{.ObjectName}}_GetLookup() returns a lookup list of all {{.ObjectName}} items in lookup format
func {{.ObjectName}}_GetLookup() []dm.Lookup_Item {
	var returnList []dm.Lookup_Item
	count, {{.ObjectNameLower}}List, _ := {{.ObjectName}}_GetList()
	for i := 0; i < count; i++ {
		returnList = append(returnList, dm.Lookup_Item{ID: {{.ObjectNameLower}}List[i].{{.LookupID}}, Name: {{.ObjectNameLower}}List[i].{{.LookupName}}})
	}
	return returnList
}

// {{.ObjectName}}_GetFilteredLookup() returns a lookup list of all {{.ObjectName}} items in lookup format
func {{.ObjectName}}_GetFilteredLookup(requestObject string,requestField string) []dm.Lookup_Item {
	var returnList []dm.Lookup_Item
	reqClass := "{{.ObjectName}}"
	reqField := requestObject+"-"+requestField
	reqCategory := "Filter"
	filter,_ := Data_GetString(reqClass, reqField, reqCategory)
	if filter == "" {
		logs.Warning("{{.ObjectName}}_GetFilteredLookup() - No filter found for " + reqClass + " " + reqField)
	} 
	count, {{.ObjectNameLower}}List, _ := {{.ObjectName}}_GetListFiltered(filter)
	for i := 0; i < count; i++ {
		returnList = append(returnList, dm.Lookup_Item{ID: {{.ObjectNameLower}}List[i].{{.LookupID}}, Name: {{.ObjectNameLower}}List[i].{{.LookupName}}})
	}
	return returnList
}

{{end}}

// {{.ObjectName}}_GetByID() returns a single {{.ObjectName}} record
func {{.ObjectName}}_GetByID(id string) (int, dm.{{.ObjectName}}, error) {

{{if .HasFetchAdaptor}}
	 _, {{.ObjectNameLower}}Item, _ := {{.ObjectName}}_GetByID_impl(id)
	{{else}}
	tsql := {{.ObjectName}}_SQLbase
	tsql = tsql + " " + das.WHERE + dm.{{.ObjectName}}_SQLSearchID + das.EQ + das.ID(id)
	_, _, {{.ObjectNameLower}}Item, _ := {{.ObjectNameLower}}_Fetch(tsql)
{{end}}

	{{.ObjectNameLower}}Item = {{.ObjectName}}_PostGet({{.ObjectNameLower}}Item,id)

	return 1, {{.ObjectNameLower}}Item, nil
}

func {{.ObjectName}}_PostGet({{.ObjectNameLower}}Item dm.{{.ObjectName}},id string) dm.{{.ObjectName}} {
	// START
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	//
{{range .FieldsList}}{{if .HasCallout}}	{{$.ObjectNameLower}}Item.{{.FieldName}},{{$.ObjectNameLower}}Item.{{.FieldName}}_props = {{$.ObjectName}}_{{.FieldName}}_validate_impl (GET,id,{{$.ObjectNameLower}}Item.{{.FieldName}},{{$.ObjectNameLower}}Item,{{$.ObjectNameLower}}Item.{{.FieldName}}_props)
{{end}}{{end}}	// 
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	// END
	return {{.ObjectNameLower}}Item
}


{{if .ProvidesReverseLookup}}// {{.ObjectName}}_GetByReverseLookup(id string) returns a single {{.ObjectName}} record using the {{.ReverseLookup}} field as key.
func {{.ObjectName}}_GetByReverseLookup(id string) (int, dm.{{.ObjectName}}, error) {
{{if .HasFetchAdaptor}}
	  _, {{.ObjectNameLower}}Item, _ := {{.ObjectName}}_GetByReverseLookup_impl(id,"{{.ReverseLookup}}")
{{else}}
	tsql := {{.ObjectName}}_SQLbase
	tsql = tsql + " " + das.WHERE + "{{.ReverseLookup}} " + das.EQ + das.ID(id)

	_, _, {{.ObjectNameLower}}Item, _ := {{.ObjectNameLower}}_Fetch(tsql)
	{{end}}
	return 1, {{.ObjectNameLower}}Item, nil
}{{end}}

// {{.ObjectName}}_DeleteByID() deletes a single {{.ObjectName}} record
func {{.ObjectName}}_Delete(id string) {

{{if or .HasStoreAdaptor .HasFetchAdaptor}}
	{{.ObjectName}}_Delete_impl(id)
	{{else}}
// Uses Hard Delete
	object_Table := {{.ObjectName}}_QualifiedName
	tsql := das.DELETE + das.FROM + object_Table
	tsql = tsql + " " + das.WHERE + dm.{{.ObjectName}}_SQLSearchID + das.EQ + das.ID(id)
	das.Execute(tsql)	
{{end}}
	
}

	{{if .CanSoftDelete}}
	// {{.ObjectName}}_SoftDeleteByID() soft deletes a single {{.ObjectName}} record
func {{.ObjectName}}_SoftDelete(id string) {
	//Uses Soft Delete
		_,{{.ObjectNameLower}}Item,_ := {{.ObjectName}}_GetByID(id)
		{{.ObjectNameLower}}Item.SYSDeletedBy = Audit_Update("", Audit_Host())
		{{.ObjectNameLower}}Item.SYSDeleted = Audit_Update("", Audit_TimeStamp())
		{{.ObjectNameLower}}Item.SYSDeletedHost = Audit_Update("", Audit_Host())
		_,err := {{.ObjectName}}_StoreSystem({{.ObjectNameLower}}Item)
		if err != nil {
			logs.Error("{{.ObjectName}}_SoftDelete()",err)
		}
}
	{{end}}


// {{.ObjectName}}_Store() saves/stores a {{.ObjectName}} record to the database
func {{.ObjectName}}_Store(r dm.{{.ObjectName}},req *http.Request) (dm.{{.ObjectName}},error) {

	r, err := {{.ObjectName}}_Validate(r)
	if err == nil {
		err = {{.ObjectNameLower}}_Save(r, Audit_User(req))
	} else {
		logs.Information("{{.ObjectName}}_Store()", err.Error())
	}

	return r, err
}

// {{.ObjectName}}_StoreSystem() saves/stores a {{.ObjectName}} record to the database
func {{.ObjectName}}_StoreSystem(r dm.{{.ObjectName}}) (dm.{{.ObjectName}},error) {
	
	r, err := {{.ObjectName}}_Validate(r)
	if err == nil {
		err = {{.ObjectNameLower}}_Save(r, Audit_Host())
	} else {
		logs.Information("{{.ObjectName}}_Store()", err.Error())
	}

	return r, err
}

// {{.ObjectName}}_Validate() validates for saves/stores a {{.ObjectName}} record to the database
func {{.ObjectName}}_Validate(r dm.{{.ObjectName}}) (dm.{{.ObjectName}}, error) {
	var err error
	// START
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	//
{{range .FieldsList}}{{if .HasCallout}}	r.{{.FieldName}},r.{{.FieldName}}_props = {{$.ObjectName}}_{{.FieldName}}_validate_impl (PUT,r.{{$.QueryFieldID}},r.{{.FieldName}},r,r.{{.FieldName}}_props)
	if r.{{.FieldName}}_props.MsgMessage != "" {
		err = errors.New(r.{{.FieldName}}_props.MsgMessage)
	}
{{end}}{{end}}	// 
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	// END
	//
	{{if .HasCrossval}}
	// START
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	//
	r, _, err = {{$.ObjectName}}_ObjectValidation_impl(PUT, r.{{.QueryFieldID}}, r)
	// 
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	// END
	{{end}}

	return r,err
}
//

// {{.ObjectNameLower}}_Save() saves/stores a {{.ObjectName}} record to the database
func {{.ObjectNameLower}}_Save(r dm.{{.ObjectName}},usr string) error {

    var err error

	if len(r.{{.QueryFieldID}}) == 0 {
		r.{{.QueryFieldID}} = {{.ObjectName}}_NewID(r)
	}

// If there are fields below, create the methods in dao\{{$.ObjectNameLower}}_impl.go
{{- range .FieldsList}}{{- if .HasCallout}}  r.{{.FieldName}},err = {{$.ObjectName}}_{{.FieldName}}_OnStore_impl (r.{{.FieldName}},r,usr){{end -}}
{{end -}}
	{{if .HasAudit}}
	r.SYSCreated = Audit_Update(r.SYSCreated, Audit_TimeStamp())
	r.SYSCreatedBy = Audit_Update(r.SYSCreatedBy, usr)
	r.SYSCreatedHost = Audit_Update(r.SYSCreatedHost,Audit_Host())
	r.SYSUpdated = Audit_Update("", Audit_TimeStamp())
	r.SYSUpdatedBy = Audit_Update("",usr)
	r.SYSUpdatedHost = Audit_Update("",Audit_Host())
	r.SYSDbVersion = core.DB_Version()
	{{end}}
logs.Storing("{{.ObjectName}}",fmt.Sprintf("%v", r))
{{if .HasStoreAdaptor}}
// Please Create Functions Below in the adaptor/{{.ObjectName}}_impl.go file
	err1 := {{.ObjectName}}_Delete_impl(r.{{.QueryFieldID}})
	err2 := {{.ObjectName}}_Update_impl(r.{{.QueryFieldID}},r,usr)
	if err1 != nil {
		err = err1
	}
	if err2 != nil {
		err = err2
	}
{{else}}
//Deal with the if its Application or null add this bit, otherwise dont.

	ts := SQLData{}
	// START
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	//
	{{range .FieldsList}}{{if not .IsExtra}}ts = addData(ts, dm.{{$.ObjectName}}_{{.FieldName}}_sql, r.{{.FieldName}}){{end}}
	{{end}}	
	// 
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	// END

	tsql := das.INSERT + das.INTO + {{.ObjectName}}_QualifiedName
	tsql = tsql + " (" + fields(ts) + ")"
	tsql = tsql + " "+das.VALUES +"(" + values(ts) + ")"

	{{.ObjectName}}_Delete(r.{{.QueryFieldID}})
	das.Execute(tsql)

{{end}}

	return err

}


{{if not .HasFetchAdaptor}}
// {{.ObjectNameLower}}_Fetch read all {{.ObjectName}}'s
func {{.ObjectNameLower}}_Fetch(tsql string) (int, []dm.{{.ObjectName}}, dm.{{.ObjectName}}, error) {

	var recItem dm.{{.ObjectName}}
	var recList []dm.{{.ObjectName}}

	returnList, noitems, err := das.Query(core.{{.PropertiesName}}DB, tsql)
	if err != nil {
		logs.Fatal(err.Error(),err)
	}

	for i := 0; i < noitems; i++ {

		rec := returnList[i]
	// START
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	//
	{{range .FieldsList}}{{if .IsBaseField}}   recItem.{{.FieldName}}  = get_{{.Type}}(rec, dm.{{$.ObjectName}}_{{.FieldName}}_sql, "{{.Default}}"){{else}}{{end}}
	{{end}}
	// If there are fields below, create the methods in adaptor\{{$.ObjectName}}_impl.go
	{{- range .FieldsList}}{{- if .HasCallout}}   recItem.{{.FieldName}}  = {{$.ObjectName}}_{{.FieldName}}_OnFetch_impl (recItem){{end -}}
	{{end -}}
	// 
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	// END
	///
	//Add to the list
	//
		recList = append(recList, recItem)
	}

	return noitems, recList, recItem, nil
}
	{{else}}
	// {{.ObjectNameLower}}_Fetch is not required as GetByID, GetAll etc... have been diverted to _impl
	{{end}}


func {{.ObjectName}}_NewID(r dm.{{.ObjectName}}) string {
	{{if .CanOverrideID}}
	// {{.ObjectName}}_NewID_impl should be specified in dao/{{.ObjectName}}_impl.go
	// to provide the implementation for the special case.
	// override should return id - override function should be defined as
	// {{.ObjectName}}_NewID_impl(r dm.{{.ObjectName}}) string {...}
	//
	id := {{.ObjectName}}_NewID_impl(r)
	{{else}}
	id := uuid.New().String()
	{{end}}
	return id
}



// {{.ObjectNameLower}}_Fetch read all {{.ObjectName}}'s
func {{.ObjectName}}_New() (int, []dm.{{.ObjectName}}, dm.{{.ObjectName}}, error) {

	var r = dm.{{.ObjectName}}{}
	var rList []dm.{{.ObjectName}}
	

	// START
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	//
{{range .FieldsList}}{{- if .HasCallout}}	r.{{.FieldName}},r.{{.FieldName}}_props = {{$.ObjectName}}_{{.FieldName}}_validate_impl (NEW,r.{{$.QueryFieldID}},r.{{.FieldName}},r,r.{{.FieldName}}_props)
{{end -}}{{end}}	
	// 
	// Dynamically generated {{.Date}} by {{.Who}} on {{.Host}} 
	// END
	rList = append(rList, r)
	return 1, rList, r, nil
}